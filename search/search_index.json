{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lime Bootstrap The Lime Bootstrap (LBS) framework is made to make it easier, better and faster working with Actionpads in Lime CRM Desktop. The framework relies heavily on Knockout.js and Twitter Bootstrap but with custom styling and a simple, yet powerful script called lbs.js . The framework contains several built in functions and third party libraries, but is also expandable through custom apps. LBS is only meant to be used inside Lime CRM Desktop, but for debugging reasons all functionality (except the data connections) should work in any browser. Requirements WebView2 or Internet Explorer 11 Lime CRM Desktop 10.11 or greater Install LBS is included in the Lime CRM Base Solution and nothing is needs to be done in this case. If installing LBS from scratch: Copy the system and resources folders, lbs.html and _config.js to the Actionpad-folder. Import the two VBA modules found in the VBA folder. Save VBA and Publish Actionpads. If you'll like the some basic views to start with you should copy them from the latest Lime CRM Base Solution acionpad folder. Upgrade Upgrading LBS is done by downloading the lastest version and replacing some files and VBA. Remember to check if you need to unblock the zip file (right click>Properties>Unblock>OK). Check the _config.js for customizations and add those to the new _config.js file. Copy the system and resources folders, lbs.html and _config.js to the Actionpad-folder. Delete the VBA modules Localize and lbsHelper and import the VBA modules found in the VBA folder. Save VBA and Publish Actionpads. Custom CSS in LBS Our recommendation and the basic principle are to avoid the use of self-written CSS in LBS since we can not guarantee how this will affect future versions of LBS. The purpose of LBS is to standardize Actionpads and to be able to deliver updates without worrying for failures. We cannot prevent customers to add their own written CSS. If you really have to you SHOULD NOT update lime.css or add a custom CSS file in system / css folder. This is very risky since an update will replace the entire system folder. To avoid disasters where custom css is removed when updating LBS you should follow the below instructions. Create a folder called custom in the actionpad folder, in this folder create a CSS file called custom.css This file is not maintained by Lundalogik and we can not guarantee that the custom CSS will work with future LBS updates, but it will not get overwritten or removed. In addition to this they have to include it in lbs.html, which it does with the following line of code in the css section: <link rel=\"stylesheet\" type=\"text/css\" href\"custom/custom.css\" /> IMPORTANT: The recommendation is to avoid custom CSS.","title":"Introduction"},{"location":"#lime-bootstrap","text":"The Lime Bootstrap (LBS) framework is made to make it easier, better and faster working with Actionpads in Lime CRM Desktop. The framework relies heavily on Knockout.js and Twitter Bootstrap but with custom styling and a simple, yet powerful script called lbs.js . The framework contains several built in functions and third party libraries, but is also expandable through custom apps. LBS is only meant to be used inside Lime CRM Desktop, but for debugging reasons all functionality (except the data connections) should work in any browser.","title":"Lime Bootstrap"},{"location":"#requirements","text":"WebView2 or Internet Explorer 11 Lime CRM Desktop 10.11 or greater","title":"Requirements"},{"location":"#install","text":"LBS is included in the Lime CRM Base Solution and nothing is needs to be done in this case. If installing LBS from scratch: Copy the system and resources folders, lbs.html and _config.js to the Actionpad-folder. Import the two VBA modules found in the VBA folder. Save VBA and Publish Actionpads. If you'll like the some basic views to start with you should copy them from the latest Lime CRM Base Solution acionpad folder.","title":"Install"},{"location":"#upgrade","text":"Upgrading LBS is done by downloading the lastest version and replacing some files and VBA. Remember to check if you need to unblock the zip file (right click>Properties>Unblock>OK). Check the _config.js for customizations and add those to the new _config.js file. Copy the system and resources folders, lbs.html and _config.js to the Actionpad-folder. Delete the VBA modules Localize and lbsHelper and import the VBA modules found in the VBA folder. Save VBA and Publish Actionpads.","title":"Upgrade"},{"location":"#custom-css-in-lbs","text":"Our recommendation and the basic principle are to avoid the use of self-written CSS in LBS since we can not guarantee how this will affect future versions of LBS. The purpose of LBS is to standardize Actionpads and to be able to deliver updates without worrying for failures. We cannot prevent customers to add their own written CSS. If you really have to you SHOULD NOT update lime.css or add a custom CSS file in system / css folder. This is very risky since an update will replace the entire system folder. To avoid disasters where custom css is removed when updating LBS you should follow the below instructions. Create a folder called custom in the actionpad folder, in this folder create a CSS file called custom.css This file is not maintained by Lundalogik and we can not guarantee that the custom CSS will work with future LBS updates, but it will not get overwritten or removed. In addition to this they have to include it in lbs.html, which it does with the following line of code in the css section: <link rel=\"stylesheet\" type=\"text/css\" href\"custom/custom.css\" /> IMPORTANT: The recommendation is to avoid custom CSS.","title":"Custom CSS in LBS"},{"location":"advanced/","text":"Advanced How does it work? The new Actionpads are inspired of how a single page application work. Views (basically html-templates) and data(usually JSON) are loaded via AJAX (an asyncrounous javacript call) by the the web application. The template is then rendered by applying the data and the result is shown to the user. In Lime Boostraps case lbs.html and lbs.js constitute the main application and all Actionpads set to show lbs.html . For simplification we'll call the framework just LBS (Lime Bootstrap). lbs.html contians all included CSS, JS and meta tags. The Actionpads (for example company.html) are now just views, containing no included CSS or JS. lbs.html will detemine which view to load either by a supplied query string (the thing after the questionmark), ../lbs.html?ap=company or if nothing is supplied, by trying to load a view with the same name as the class of the Lime CRM inspector. The active inspectors record is then loaded as data and converted to JSON. Basic flow in LBS: LBS starts and includes all base CSS, Javascript and sets a lot of environment variables, such as skin color, language. LBS then checks where you want your display your HTML-view. In Lime CRM you can show HTML in the Actionpad, in a field, in a tab or in a web dialog. If you don't specify anything lbs will assume your building an Actionpad. The specified view, html-file, is loaded Data is loaded. LBS will first check _config.js for datasources, specified with the name of the view. If no datasources are found LBS will try to load the data from the ActiveInspector . A dictionary of local languages translations is loaded. All data is supplied as a JSON-object and then converted to a knockout viewmodel- Apps are discovered, started and their data is loaded into the main viewmodel. A app can specify depencies on other libraries or styles. These are dynamically loaded and checked for duplicates. The viewmodel is applied to the now complete view and rendered. Loading views As metioned lbs.html is the real engine and all HTML things should be loaded trough lbs.html. This is achieved by supplying a query string [URL to Actionpad folder]/lbs.html?ap=[path to your view/view name] The path is relative the lbs.html file and you should not include the file extension (.html). Loading the company Actionpad (company.html): lbs.html?ap=company The console and debugging your applications The framework has been blessed with a virtual console, to use for debugging. It is activated through changing debug: true, in _config.js . The console will allways automagically appeare if a critical error is logged. If you make syntacic errors in the wrong place, even the viritual console will crash. You can easily use the console when building apps, read more abot this in the app readme. The console is limited to 30 messages by default. When working with more advanced stuff you might like to have access to a real console. Modern browsers won't allow dynamically loadings scripts from the local file system, due to security concerns. Dynamically loading scripts and html views are core concepts in LBS. In Lime CRM a small VBA function acts as the loader. However in system/bin/ you will find a .bat-file which will restart Google Chrome in a debug mode, allowing you to inspect the CSS and JS. If you dislike this approach a small HTTP-server will do the trick. With Python3 just go to the actionpad folder and write this in your terminal: $python -m http.server Different wrappers In Lime CRM HTML can be displayed in the actionpad, in a HTML-field, in a HTML-tab and in a HTML-dialog. Theses places are quite different and requires some basic setup to work well. Your view can thus be loaded into three different wrappers for helping you with the different conditions. The three basic wrappers of content: Actionpad-wrapper . A thin and long wrapper with a slightly lighter background images with a sharp edge to teh rest of the content: Inline-wrapper . Used for HTML-fields. Completely plain, with the same color as the Inspector and no padding or margin. Built to seamlessly look as a part of the inspector. Tab-wrapper . Used for wider layouts, such as a tab or a dialog. Uses default Twitter Bootstrap margins and is fully responsive. The Actionpad wrapper is allways used unless anything else is stated. Pick your wrapper by suppling a querystring to lbs.html Inline:___ lbs.html?type=inline __Tab: lbs.html?type=tab When working with tabs, fields or dialogs it is easiest to use VBA to set the URL. Example: ActiveInspector.Controls.SetValue(\"htmlfield\", WebFolder & \"lbs.html?ap=foo&type=inline\") Settings and loading more data - _config.js For loading additional data or enabling the debug mode you have a file called _config.js . Example: /** Enable or disable the debug console for the whole application **/ lbs . setDebug ( true ); /** Configure special use cases, mainly when requiring additional data sources **/ lbs . configure ({ 'index' : { // <-- name of view dataSources : [ { type : 'localization' , source : '' }, ], autorefresh : false } }) Logic in bindnings Knockout lets you write JavaScript expressions directly in the bindnings. This is a really simple and powerful way of doing cool stuff. Word of advice: Too much logic in the view isn't nice at all. If you need to do a little more advanced stuff, build an app! Example: < div class = \"alert alert-warning fullwidth\" data-bind = \" visible: todo.endtime.value !== null && (moment(todo.endtime.value) < moment() && todo.done.value != 1), text: 'Uppgiften \u00e4r ' + (todo.endtime.value != null ? moment(todo.endtime.value).fromNow(true) : '' )+ ' f\u00f6rsenad!', icon:'fa-bell'\" > </ div > Please note that you can put the bindings on separate rows to increase readability Cookies Cookies are used to store values from the actionpads and apps. Every cookie is locally stored in the actionpad folder and is unique for every computer and database (not user). There are two methods that you can use to handle a cookie: Get cookie To get the value in a cookie use the method lbs.bakery.getCookie(name) var mycookievalue = lbs . bakery . getCookie ( \u201c gingerbread \u201d ) Set Cookie To set a cookie just call the function lbs.bakery.setCookie(name,value,days). See example below. lbs . bakery . setCookie ( \u201c gingerbread \u201d , mycookievalue , 3 )","title":"Advanced"},{"location":"advanced/#advanced","text":"","title":"Advanced"},{"location":"advanced/#how-does-it-work","text":"The new Actionpads are inspired of how a single page application work. Views (basically html-templates) and data(usually JSON) are loaded via AJAX (an asyncrounous javacript call) by the the web application. The template is then rendered by applying the data and the result is shown to the user. In Lime Boostraps case lbs.html and lbs.js constitute the main application and all Actionpads set to show lbs.html . For simplification we'll call the framework just LBS (Lime Bootstrap). lbs.html contians all included CSS, JS and meta tags. The Actionpads (for example company.html) are now just views, containing no included CSS or JS. lbs.html will detemine which view to load either by a supplied query string (the thing after the questionmark), ../lbs.html?ap=company or if nothing is supplied, by trying to load a view with the same name as the class of the Lime CRM inspector. The active inspectors record is then loaded as data and converted to JSON. Basic flow in LBS: LBS starts and includes all base CSS, Javascript and sets a lot of environment variables, such as skin color, language. LBS then checks where you want your display your HTML-view. In Lime CRM you can show HTML in the Actionpad, in a field, in a tab or in a web dialog. If you don't specify anything lbs will assume your building an Actionpad. The specified view, html-file, is loaded Data is loaded. LBS will first check _config.js for datasources, specified with the name of the view. If no datasources are found LBS will try to load the data from the ActiveInspector . A dictionary of local languages translations is loaded. All data is supplied as a JSON-object and then converted to a knockout viewmodel- Apps are discovered, started and their data is loaded into the main viewmodel. A app can specify depencies on other libraries or styles. These are dynamically loaded and checked for duplicates. The viewmodel is applied to the now complete view and rendered.","title":"How does it work?"},{"location":"advanced/#loading-views","text":"As metioned lbs.html is the real engine and all HTML things should be loaded trough lbs.html. This is achieved by supplying a query string [URL to Actionpad folder]/lbs.html?ap=[path to your view/view name] The path is relative the lbs.html file and you should not include the file extension (.html). Loading the company Actionpad (company.html): lbs.html?ap=company","title":"Loading views"},{"location":"advanced/#the-console-and-debugging-your-applications","text":"The framework has been blessed with a virtual console, to use for debugging. It is activated through changing debug: true, in _config.js . The console will allways automagically appeare if a critical error is logged. If you make syntacic errors in the wrong place, even the viritual console will crash. You can easily use the console when building apps, read more abot this in the app readme. The console is limited to 30 messages by default. When working with more advanced stuff you might like to have access to a real console. Modern browsers won't allow dynamically loadings scripts from the local file system, due to security concerns. Dynamically loading scripts and html views are core concepts in LBS. In Lime CRM a small VBA function acts as the loader. However in system/bin/ you will find a .bat-file which will restart Google Chrome in a debug mode, allowing you to inspect the CSS and JS. If you dislike this approach a small HTTP-server will do the trick. With Python3 just go to the actionpad folder and write this in your terminal: $python -m http.server","title":"The console and debugging your applications"},{"location":"advanced/#different-wrappers","text":"In Lime CRM HTML can be displayed in the actionpad, in a HTML-field, in a HTML-tab and in a HTML-dialog. Theses places are quite different and requires some basic setup to work well. Your view can thus be loaded into three different wrappers for helping you with the different conditions. The three basic wrappers of content: Actionpad-wrapper . A thin and long wrapper with a slightly lighter background images with a sharp edge to teh rest of the content: Inline-wrapper . Used for HTML-fields. Completely plain, with the same color as the Inspector and no padding or margin. Built to seamlessly look as a part of the inspector. Tab-wrapper . Used for wider layouts, such as a tab or a dialog. Uses default Twitter Bootstrap margins and is fully responsive. The Actionpad wrapper is allways used unless anything else is stated. Pick your wrapper by suppling a querystring to lbs.html Inline:___ lbs.html?type=inline __Tab: lbs.html?type=tab When working with tabs, fields or dialogs it is easiest to use VBA to set the URL. Example: ActiveInspector.Controls.SetValue(\"htmlfield\", WebFolder & \"lbs.html?ap=foo&type=inline\")","title":"Different wrappers"},{"location":"advanced/#settings-and-loading-more-data-_configjs","text":"For loading additional data or enabling the debug mode you have a file called _config.js . Example: /** Enable or disable the debug console for the whole application **/ lbs . setDebug ( true ); /** Configure special use cases, mainly when requiring additional data sources **/ lbs . configure ({ 'index' : { // <-- name of view dataSources : [ { type : 'localization' , source : '' }, ], autorefresh : false } })","title":"Settings and loading more data - _config.js"},{"location":"advanced/#logic-in-bindnings","text":"Knockout lets you write JavaScript expressions directly in the bindnings. This is a really simple and powerful way of doing cool stuff. Word of advice: Too much logic in the view isn't nice at all. If you need to do a little more advanced stuff, build an app! Example: < div class = \"alert alert-warning fullwidth\" data-bind = \" visible: todo.endtime.value !== null && (moment(todo.endtime.value) < moment() && todo.done.value != 1), text: 'Uppgiften \u00e4r ' + (todo.endtime.value != null ? moment(todo.endtime.value).fromNow(true) : '' )+ ' f\u00f6rsenad!', icon:'fa-bell'\" > </ div > Please note that you can put the bindings on separate rows to increase readability","title":"Logic in bindnings"},{"location":"advanced/#cookies","text":"Cookies are used to store values from the actionpads and apps. Every cookie is locally stored in the actionpad folder and is unique for every computer and database (not user). There are two methods that you can use to handle a cookie:","title":"Cookies"},{"location":"advanced/#get-cookie","text":"To get the value in a cookie use the method lbs.bakery.getCookie(name) var mycookievalue = lbs . bakery . getCookie ( \u201c gingerbread \u201d )","title":"Get cookie"},{"location":"advanced/#set-cookie","text":"To set a cookie just call the function lbs.bakery.setCookie(name,value,days). See example below. lbs . bakery . setCookie ( \u201c gingerbread \u201d , mycookievalue , 3 )","title":"Set Cookie"},{"location":"basicUsage/","text":"Basic usage A Lime Bootstrap Actionpad An Actionpad built with Lime Bootstrap has the following structure: <!-- Header section, The colorfull thing at the top --> < div class = \"header-container [color]\" > <!-- Specify the color of the header. Please see color section for available colors --> < div class = \"header-icon\" ></ div > <!-- Specify the icon of the header. Please see icon section for available special icons --> < h2 data-bind = \"\" ></ h2 > < ul class = \"info-links\" > < li data-bind = \"\" > </ li > ... </ ul > </ div > </ div > <!-- /Header section --> <!-- Body section --> < div class = \"menu\" > <!-- Menu --> </ div > <!-- /Body section --> Components Lime bootstrap supports all Twitter bootstrap elements but has also a few special elements. Please see the Twitter bootstrap documentation for all cool stuff you have access to. We also supply the following components: Menu: - A menu to hold actions Dropdown button: - A dropdown button styled for Lime CRM Header section: - The top section of every actionpad Data carousel: - A rotating object to hold more objects See all our components here Functions and Apps All Twitter bootstrap functions are included, please see the Twitter bootstrap documentation Lime Bootstraps allows you to load small components we call apps, as a compliment to Twitter Bootstraps components. To start an app add this HTML to your view: < div data-app = \"{app:'[Name of app]', config:{ [App config] }}\" > </ div > Each app has it's own instructions how to start and install them. Some apps require VBA and/or stored procedures to be added. Bindings and filters As we relay heavily on knockout their data-bind=\"\" syntax is used through out the framework. The data-bind=\"\" syntax is a used as a property on an html element. In a data-bind you add bindings , actions or triggers, to perform actions. All Knockout bindings are available, but also a few custom bindings to make your life easier. Read more about bindings and Knockout here and try the tutorial here A basic example of use of a knockout binding: < li data-bind = \"text:company.name\" ></ li > You can also use a short hand for bindnings, using brackets. The above example can also be written as < li > {{company.name}} </ li > You can read more about this short hand syntax here As default you only have access to the data of the ActiveInspector! Knockout bindings Knockout supplies a large set of bindings, which all can be found here Our full documentation can be found here Some of the more common and useful bindings visible: - hides or shows a html element based on an boolean expression text: - Displays a variable as text html: - Prepends the supplied font awesome icon to the html element css: - Add or remove CSS classes style: - Add styling attributes attr - Set value of any html attribute foreach: - Loop through an array Custom bindings To make your life easier we have implemented a few custom bindnings. List of custom handlers: call: - Tries to call the provided phone number email: - Tries to email the provided address icon: - Prepends the supplied font awesome icon to the html element limeLink: - Creates an Lime link from a provided relationship field, for example person.company openURL: - Opens the supplied URL in a external browser showOnMap: - Opens Google Maps with the supplied data as a search query vba: - Provide an string of an VBA function with it's parameters separated by commas vbaVisible: - Extends knockouts 'visible:' by executing the supplied Boolean VBA function appInvoke: - Invokes an old-style actionpad app like textfileimport or duplicatemerge popover: - Displays a popover tooltip: - Displays a bootstrap tooltip Filters Filters are a smart and easy way to format your data in a binding A filter is a function transforming your binding data and outputting a formated version of it. < li data-bind = \"text:deal.value | currency: SEK\" ></ li > < li > {{deal.value | currency: SEK}} </ li > This will produce a nicely formated value of a deal, example: \"10 000SEK\" List of filters: default: - If the value is blank, null, or an empty array, replace it with the given default value. fit: [: ][: ] - Trim the value if it\u2019s longer than the given length. The trimmed portion is replaced with ... or the replacement value, if given. By default, the value is trimmed on the right but can be changed to left or middle through the where option. For example: name | fit:10::'middle' will convert Shakespeare to Shak...are. json[:space] - Convert the value to a JSON string using ko.toJSON. You can give a space value to format the JSON output. lowercase - Convert the value to lowercase. number: - Rounds a number of desired number of decimals replace: : - Perform a search and replace on the value using String#replace. uppercase - Convert the value to uppercase. currency: : - Formats a number with to a currency with a space a separate every number. Default 1000 percent: - Formats a decimal number as percent 0,01 > 1% fromNow: - Formats a date as a human readable text as for how long ago the date was. Example 2000-01-01 > \"Over ten years ago\" Translation: Handling multiple languages All available translations from the Localization table are automatically available in the actionpad context. The same language as the logged in user uses is automatically used. The translations are cached in a dictionary to increase speed, but requires you to run ThisApplication.Setup to rebuild the dictionary if you add translations or make changes. < li data-bind = \"text:localize.ActionPad_Todo.addTodo\" ></ li > The example below uses the versatile knockout binding attr to add a tooltip with localization support. It also uses the custom Lime Bootstrap bindings vba and icon . < li data-bind = \"vba:'Actionpad_Person.newComment', text:localize.Actionpad_Person.t_newcomment, icon:'fa-comment', attr: { title: localize.Actionpad_Person.tooltip_newcomment }\" ></ li > Technical notes The translations are added to the global view model and are thus available in your apps. Note that it is not possible to use localization in the standard way, e.g., localize.Actionpad_Person.t_newcomment within a block where you are using the knockout binding with . Fetching data from fields in Lime CRM All fields from the ActiveInspector are automagically available for you to use in your view. The syntax is [Record class name].[field database name].[property] . The available properties are (in order of relevance): * .text * .value * .key - available for set and list fields_ * .class__ - available for relation fields <!-- Company Actionpad showing the name of the company--> < li data-bind = \"text:company.name.text\" ></ li > <!-- Shorthand--> < li > {{company.name.text}} </ li > <!-- Person Actionpad using the id of the company relation as a parameter to a VBA-function. Note the Javascript syntax in the Knockout bindning --> < li data-bind = \"vba:'SomeFunction,' + person.company.value\" ></ li > <!-- Business Actionpad showing the optionKey from a set-list --> < li data-bind = \"text:business.businesstatus.key\" ></ li > Going beyond the ActiveInspector - Loading additional data It is common to use data from more than the ActiveInspector and the following syntax will NOT work <li data-bind=\"text:person.company.phone.text\"></li> Instead you can load additional data by requesting data sources in _config.js . You'll find more information about this in the advanced section. The loaded data can then be access by: <!-- Loading person and company info on a helpdesk actionpad--> < li data-bind = \"text:helpdesk.company.text\" ></ li > < li data-bind = \"text:person.phone.text\" ></ li > < li data-bind = \"text:person.mobilephone.text\" ></ li > < li data-bind = \"text:company.phone.text\" ></ li > Working with time and dates Dates are a hassle, except when you have the awesome library Moment.js . To create a iso-date: moment() To parse almost any date format: moment([CRAZY DATE FORMAT]) Moment even makes time and dates readable to people. moment().timeAgo(2011-01-01) will give you, \"A few years ago\" Moment is automagically setup to use the same language and date-format as the language of the Lime CRM desktop client. Remember to use it and check out it further! The log/watch Bootstap will give you some debug- and log views to help you out. Keyboard shortcuts The different view can be opened with shortcuts provided the actionpad is in focus. Function Command Reload actionpad ctrl + shift + r Open log ctrl + shift + l Open watch ctrl + shift + w Close log/watch window q","title":"Basic Usage"},{"location":"basicUsage/#basic-usage","text":"","title":"Basic usage"},{"location":"basicUsage/#a-lime-bootstrap-actionpad","text":"An Actionpad built with Lime Bootstrap has the following structure: <!-- Header section, The colorfull thing at the top --> < div class = \"header-container [color]\" > <!-- Specify the color of the header. Please see color section for available colors --> < div class = \"header-icon\" ></ div > <!-- Specify the icon of the header. Please see icon section for available special icons --> < h2 data-bind = \"\" ></ h2 > < ul class = \"info-links\" > < li data-bind = \"\" > </ li > ... </ ul > </ div > </ div > <!-- /Header section --> <!-- Body section --> < div class = \"menu\" > <!-- Menu --> </ div > <!-- /Body section -->","title":"A Lime Bootstrap Actionpad"},{"location":"basicUsage/#components","text":"Lime bootstrap supports all Twitter bootstrap elements but has also a few special elements. Please see the Twitter bootstrap documentation for all cool stuff you have access to. We also supply the following components: Menu: - A menu to hold actions Dropdown button: - A dropdown button styled for Lime CRM Header section: - The top section of every actionpad Data carousel: - A rotating object to hold more objects See all our components here","title":"Components"},{"location":"basicUsage/#functions-and-apps","text":"All Twitter bootstrap functions are included, please see the Twitter bootstrap documentation Lime Bootstraps allows you to load small components we call apps, as a compliment to Twitter Bootstraps components. To start an app add this HTML to your view: < div data-app = \"{app:'[Name of app]', config:{ [App config] }}\" > </ div > Each app has it's own instructions how to start and install them. Some apps require VBA and/or stored procedures to be added.","title":"Functions and Apps"},{"location":"basicUsage/#bindings-and-filters","text":"As we relay heavily on knockout their data-bind=\"\" syntax is used through out the framework. The data-bind=\"\" syntax is a used as a property on an html element. In a data-bind you add bindings , actions or triggers, to perform actions. All Knockout bindings are available, but also a few custom bindings to make your life easier. Read more about bindings and Knockout here and try the tutorial here A basic example of use of a knockout binding: < li data-bind = \"text:company.name\" ></ li > You can also use a short hand for bindnings, using brackets. The above example can also be written as < li > {{company.name}} </ li > You can read more about this short hand syntax here As default you only have access to the data of the ActiveInspector!","title":"Bindings and filters"},{"location":"basicUsage/#knockout-bindings","text":"Knockout supplies a large set of bindings, which all can be found here Our full documentation can be found here Some of the more common and useful bindings visible: - hides or shows a html element based on an boolean expression text: - Displays a variable as text html: - Prepends the supplied font awesome icon to the html element css: - Add or remove CSS classes style: - Add styling attributes attr - Set value of any html attribute foreach: - Loop through an array","title":"Knockout bindings"},{"location":"basicUsage/#custom-bindings","text":"To make your life easier we have implemented a few custom bindnings. List of custom handlers: call: - Tries to call the provided phone number email: - Tries to email the provided address icon: - Prepends the supplied font awesome icon to the html element limeLink: - Creates an Lime link from a provided relationship field, for example person.company openURL: - Opens the supplied URL in a external browser showOnMap: - Opens Google Maps with the supplied data as a search query vba: - Provide an string of an VBA function with it's parameters separated by commas vbaVisible: - Extends knockouts 'visible:' by executing the supplied Boolean VBA function appInvoke: - Invokes an old-style actionpad app like textfileimport or duplicatemerge popover: - Displays a popover tooltip: - Displays a bootstrap tooltip","title":"Custom bindings"},{"location":"basicUsage/#filters","text":"Filters are a smart and easy way to format your data in a binding A filter is a function transforming your binding data and outputting a formated version of it. < li data-bind = \"text:deal.value | currency: SEK\" ></ li > < li > {{deal.value | currency: SEK}} </ li > This will produce a nicely formated value of a deal, example: \"10 000SEK\" List of filters: default: - If the value is blank, null, or an empty array, replace it with the given default value. fit: [: ][: ] - Trim the value if it\u2019s longer than the given length. The trimmed portion is replaced with ... or the replacement value, if given. By default, the value is trimmed on the right but can be changed to left or middle through the where option. For example: name | fit:10::'middle' will convert Shakespeare to Shak...are. json[:space] - Convert the value to a JSON string using ko.toJSON. You can give a space value to format the JSON output. lowercase - Convert the value to lowercase. number: - Rounds a number of desired number of decimals replace: : - Perform a search and replace on the value using String#replace. uppercase - Convert the value to uppercase. currency: : - Formats a number with to a currency with a space a separate every number. Default 1000 percent: - Formats a decimal number as percent 0,01 > 1% fromNow: - Formats a date as a human readable text as for how long ago the date was. Example 2000-01-01 > \"Over ten years ago\"","title":"Filters"},{"location":"basicUsage/#translation-handling-multiple-languages","text":"All available translations from the Localization table are automatically available in the actionpad context. The same language as the logged in user uses is automatically used. The translations are cached in a dictionary to increase speed, but requires you to run ThisApplication.Setup to rebuild the dictionary if you add translations or make changes. < li data-bind = \"text:localize.ActionPad_Todo.addTodo\" ></ li > The example below uses the versatile knockout binding attr to add a tooltip with localization support. It also uses the custom Lime Bootstrap bindings vba and icon . < li data-bind = \"vba:'Actionpad_Person.newComment', text:localize.Actionpad_Person.t_newcomment, icon:'fa-comment', attr: { title: localize.Actionpad_Person.tooltip_newcomment }\" ></ li >","title":"Translation: Handling multiple languages"},{"location":"basicUsage/#technical-notes","text":"The translations are added to the global view model and are thus available in your apps. Note that it is not possible to use localization in the standard way, e.g., localize.Actionpad_Person.t_newcomment within a block where you are using the knockout binding with .","title":"Technical notes"},{"location":"basicUsage/#fetching-data-from-fields-in-lime-crm","text":"All fields from the ActiveInspector are automagically available for you to use in your view. The syntax is [Record class name].[field database name].[property] . The available properties are (in order of relevance): * .text * .value * .key - available for set and list fields_ * .class__ - available for relation fields <!-- Company Actionpad showing the name of the company--> < li data-bind = \"text:company.name.text\" ></ li > <!-- Shorthand--> < li > {{company.name.text}} </ li > <!-- Person Actionpad using the id of the company relation as a parameter to a VBA-function. Note the Javascript syntax in the Knockout bindning --> < li data-bind = \"vba:'SomeFunction,' + person.company.value\" ></ li > <!-- Business Actionpad showing the optionKey from a set-list --> < li data-bind = \"text:business.businesstatus.key\" ></ li >","title":"Fetching data from fields in Lime CRM"},{"location":"basicUsage/#going-beyond-the-activeinspector-loading-additional-data","text":"It is common to use data from more than the ActiveInspector and the following syntax will NOT work <li data-bind=\"text:person.company.phone.text\"></li> Instead you can load additional data by requesting data sources in _config.js . You'll find more information about this in the advanced section. The loaded data can then be access by: <!-- Loading person and company info on a helpdesk actionpad--> < li data-bind = \"text:helpdesk.company.text\" ></ li > < li data-bind = \"text:person.phone.text\" ></ li > < li data-bind = \"text:person.mobilephone.text\" ></ li > < li data-bind = \"text:company.phone.text\" ></ li >","title":"Going beyond the ActiveInspector - Loading additional data"},{"location":"basicUsage/#working-with-time-and-dates","text":"Dates are a hassle, except when you have the awesome library Moment.js . To create a iso-date: moment() To parse almost any date format: moment([CRAZY DATE FORMAT]) Moment even makes time and dates readable to people. moment().timeAgo(2011-01-01) will give you, \"A few years ago\" Moment is automagically setup to use the same language and date-format as the language of the Lime CRM desktop client. Remember to use it and check out it further!","title":"Working with time and dates"},{"location":"basicUsage/#the-logwatch","text":"Bootstap will give you some debug- and log views to help you out.","title":"The log/watch"},{"location":"basicUsage/#keyboard-shortcuts","text":"The different view can be opened with shortcuts provided the actionpad is in focus. Function Command Reload actionpad ctrl + shift + r Open log ctrl + shift + l Open watch ctrl + shift + w Close log/watch window q","title":"Keyboard shortcuts"},{"location":"bindingsAndFilters/","text":"Bindings vbaVisible: Hiding or showing elements It is common that some elements only should be visible for certain users or when specific conditions apply. It can be done in two different ways. Either use the Lime Bootstrap data-binding vbaVisible: or use the knockout binding visible: . The vbaVisible: is used as follows. A VBA function is called, handling the logic whether the element should be visible or not, returning a boolean. true: Element is visible false: Element hidden In complex cases the VBA-function can take input parameters to reduce the number of VBA functions required. < li data-bind = \"vbaVisible:'ActionPad_Helpdesk.HideLinks, take'\" ></ li > You can also use knockout's built in handler visible: to hide or show elements. Any valid Javascript will be evaluated. Example: <!-- Shows an bootstrap alert if the todo is late. Moment.js is used to parse and handle dates.--> < div class = \"alert alert-error\" data-bind = \" visible: todo.endtime.value !== null && (moment(todo.endtime.value) < moment() && todo.done.value != 1), text: 'The task is ' + (todo.endtime.value != null ? moment(todo.endtime.value).fromNow(true) : '' )+ ' late!', icon:'fa-bell'\" > </ div > The binding vbaVisible: is only able to execute a given VBA function that returns true or false. If you need to add some kind of code on top of that VBA function, use the original knockout binding visible: instead. This example uses the opposite of the function result, but any other javascript code would also work fine. < div data-bind = \"visible:!lbs.common.executeVba('App_MoveDate.moveDaysPossible')\" > ... </ div > vba: Executing VBA-functions and specific actions vba: is used to trigger VBA-functions and specific actions on click. To call a VBA function simply use: < li data-bind = \"vba:'ActionPad_Helpdesk.Take'\" ></ li > Input parameters are provided by simply separating them by commas. < li data-bind = \"vba:'ActionPad_Helpdesk.Park, 1, t_park_1_hour'\" ></ li > You can also use any available data in the actionpad as an input to the function through concatenating a string < li data-bind = \"vba:'ActionPad_Helpdesk.DoSomethingWithTheRecord,' + helpdesk.idhelpdesk.value\" ></ li > ``` ##showOnMap: Showing an address on a map * __showOnMap:__ - Searches Google Maps for the provided address. ```html < li data-bind = \"text:company.postalcity.text, showOnMap: company.fullpostaladdress.text, icon: 'fa-map-marker'\" ></ li > Call: Call a phone number call: - Ads an tel: link to the HTML wich triggers an built in softphone software. < li data-bind = \"text: company.phone.text, call: company.phone.text, icon: 'fa-phone'\" ></ li > openURL: Go to a website openURL: - Opens the suplied URL in an external browser < li data-bind = \"text:company.www.text, openURL: company.www.text, icon: 'fa-globe'\" ></ li > limeLink: Go to another Lime Record limeLink - Tries to create an Lime link to the object provided, please note that the root node of the object is used and not a specific property. < li data-bind = \"text:todo.company.text, limeLink:todo.company, icon:'fa-flag'\" ></ li > email: Send an email email - Creates an email. TODO: Should use Lime's built in email factory. < li data-bind = \"text:person.email.text, email:person.email.text, icon:'fa-envelope'\" ></ li > appInvoke: Start an app appInvoke < li data-bind = \"appInvoke: 'textfileimport\" ></ li > popover: Show additional info popover - Gives you a small overlayer of context that you can design as you like. In its simplest form, it can be used to display informative texts. It can also be initialized as an object with one or several adjustable attributes, allowing for styling both header icon and title. There are also a few pre-defined types with their own set designs. < li data-bind = \"popover: 'This is a popover'\" ></ li > If the popover is initialized as an object , the following attributes can be configured : * __icon__ Any of the icons available from Font Awesome . * __text__ Text you want to be displayed . * __title__ Title to be displayed in the header section of the popover . * __color__ Background color of the header section . All header - colors are avalible . * __trigger__ What event will trigger the event . Only two values are valid here : * hover * click where the default value is ' hover ' . * __placement__ Where the popover will be displayed in relation to its parent element . The following values are valid here : * top * right * bottom * left where the default value is ' top ' . * __type__ What template ( if any ) should be used . Only the following values are valid : * success * info * error * warning * custom where the default value is ' custom ' . The top four alternatives will override all values for ' color ' , ' title ' and ' icon ' . These will be replaced by template ones for the specific types . * __Example without template__ < li data-bind = popover:{ text: ' This is a popover ', title: ' LBS rules ', type: ' custom ', color: ' magenta ', trigger: ' click ', icon: ' fa-check ', placement: ' top ' }, text: ' Popoverclick '\" > \"> </ li > * __Example with template__ < li data-bind = \"popover:{text:'This is a popover.',type:'info'}\" ></ li > tooltip: Show a helping tooltip tooltip - Gives you a good looking tooltip. Bootstrap . You can design where you like the tooltip to show by sending a object with a placement. < a data-bind = \"text:'Andreas', tooltip: 'Konsult'\" ></ a > < a data-bind = \"text:'Andreas', tooltip: {text:'Konsult',placement:'right'}\" ></ a > Filters A filter in knockout punches is a way of 'piping' a text binding through a pre-defined filter to format the value in a desired way. The filter is initiated using the | sign followed by the name of the filter and any necessary parameter inputs to the filter. Currency The currency filter can be combined with a text data-bind to format a number as a currency. The filter takes two optional parameters - currency and divider. The currency is the unit in which you want to present the formatted number, e.g. $ or GBP or SEK. The divider lets you decide what delimiter to use for formatting the number. < div data-bind = \"text: 100000 | currency:'$':','\" ></ div > This filter will format the number 100000 as $100,000. The following code < div data-bind = \"text: 100000 | currency:'SEK'\" ></ div > will result in the formatted value 100 000 SEK.","title":"Bindnings & Filters"},{"location":"bindingsAndFilters/#bindings","text":"","title":"Bindings"},{"location":"bindingsAndFilters/#vbavisible-hiding-or-showing-elements","text":"It is common that some elements only should be visible for certain users or when specific conditions apply. It can be done in two different ways. Either use the Lime Bootstrap data-binding vbaVisible: or use the knockout binding visible: . The vbaVisible: is used as follows. A VBA function is called, handling the logic whether the element should be visible or not, returning a boolean. true: Element is visible false: Element hidden In complex cases the VBA-function can take input parameters to reduce the number of VBA functions required. < li data-bind = \"vbaVisible:'ActionPad_Helpdesk.HideLinks, take'\" ></ li > You can also use knockout's built in handler visible: to hide or show elements. Any valid Javascript will be evaluated. Example: <!-- Shows an bootstrap alert if the todo is late. Moment.js is used to parse and handle dates.--> < div class = \"alert alert-error\" data-bind = \" visible: todo.endtime.value !== null && (moment(todo.endtime.value) < moment() && todo.done.value != 1), text: 'The task is ' + (todo.endtime.value != null ? moment(todo.endtime.value).fromNow(true) : '' )+ ' late!', icon:'fa-bell'\" > </ div > The binding vbaVisible: is only able to execute a given VBA function that returns true or false. If you need to add some kind of code on top of that VBA function, use the original knockout binding visible: instead. This example uses the opposite of the function result, but any other javascript code would also work fine. < div data-bind = \"visible:!lbs.common.executeVba('App_MoveDate.moveDaysPossible')\" > ... </ div >","title":"vbaVisible: Hiding or showing elements"},{"location":"bindingsAndFilters/#vba-executing-vba-functions-and-specific-actions","text":"vba: is used to trigger VBA-functions and specific actions on click. To call a VBA function simply use: < li data-bind = \"vba:'ActionPad_Helpdesk.Take'\" ></ li > Input parameters are provided by simply separating them by commas. < li data-bind = \"vba:'ActionPad_Helpdesk.Park, 1, t_park_1_hour'\" ></ li > You can also use any available data in the actionpad as an input to the function through concatenating a string < li data-bind = \"vba:'ActionPad_Helpdesk.DoSomethingWithTheRecord,' + helpdesk.idhelpdesk.value\" ></ li > ``` ##showOnMap: Showing an address on a map * __showOnMap:__ - Searches Google Maps for the provided address. ```html < li data-bind = \"text:company.postalcity.text, showOnMap: company.fullpostaladdress.text, icon: 'fa-map-marker'\" ></ li >","title":"vba: Executing VBA-functions and specific actions"},{"location":"bindingsAndFilters/#call-call-a-phone-number","text":"call: - Ads an tel: link to the HTML wich triggers an built in softphone software. < li data-bind = \"text: company.phone.text, call: company.phone.text, icon: 'fa-phone'\" ></ li >","title":"Call: Call a phone number"},{"location":"bindingsAndFilters/#openurl-go-to-a-website","text":"openURL: - Opens the suplied URL in an external browser < li data-bind = \"text:company.www.text, openURL: company.www.text, icon: 'fa-globe'\" ></ li >","title":"openURL: Go to a website"},{"location":"bindingsAndFilters/#limelink-go-to-another-lime-record","text":"limeLink - Tries to create an Lime link to the object provided, please note that the root node of the object is used and not a specific property. < li data-bind = \"text:todo.company.text, limeLink:todo.company, icon:'fa-flag'\" ></ li >","title":"limeLink: Go to another Lime Record"},{"location":"bindingsAndFilters/#email-send-an-email","text":"email - Creates an email. TODO: Should use Lime's built in email factory. < li data-bind = \"text:person.email.text, email:person.email.text, icon:'fa-envelope'\" ></ li >","title":"email: Send an email"},{"location":"bindingsAndFilters/#appinvoke-start-an-app","text":"appInvoke < li data-bind = \"appInvoke: 'textfileimport\" ></ li >","title":"appInvoke: Start an app"},{"location":"bindingsAndFilters/#popover-show-additional-info","text":"popover - Gives you a small overlayer of context that you can design as you like. In its simplest form, it can be used to display informative texts. It can also be initialized as an object with one or several adjustable attributes, allowing for styling both header icon and title. There are also a few pre-defined types with their own set designs. < li data-bind = \"popover: 'This is a popover'\" ></ li > If the popover is initialized as an object , the following attributes can be configured : * __icon__ Any of the icons available from Font Awesome . * __text__ Text you want to be displayed . * __title__ Title to be displayed in the header section of the popover . * __color__ Background color of the header section . All header - colors are avalible . * __trigger__ What event will trigger the event . Only two values are valid here : * hover * click where the default value is ' hover ' . * __placement__ Where the popover will be displayed in relation to its parent element . The following values are valid here : * top * right * bottom * left where the default value is ' top ' . * __type__ What template ( if any ) should be used . Only the following values are valid : * success * info * error * warning * custom where the default value is ' custom ' . The top four alternatives will override all values for ' color ' , ' title ' and ' icon ' . These will be replaced by template ones for the specific types . * __Example without template__ < li data-bind = popover:{ text: ' This is a popover ', title: ' LBS rules ', type: ' custom ', color: ' magenta ', trigger: ' click ', icon: ' fa-check ', placement: ' top ' }, text: ' Popoverclick '\" > \"> </ li > * __Example with template__ < li data-bind = \"popover:{text:'This is a popover.',type:'info'}\" ></ li >","title":"popover: Show additional info"},{"location":"bindingsAndFilters/#tooltip-show-a-helping-tooltip","text":"tooltip - Gives you a good looking tooltip. Bootstrap . You can design where you like the tooltip to show by sending a object with a placement. < a data-bind = \"text:'Andreas', tooltip: 'Konsult'\" ></ a > < a data-bind = \"text:'Andreas', tooltip: {text:'Konsult',placement:'right'}\" ></ a >","title":"tooltip: Show a helping tooltip"},{"location":"bindingsAndFilters/#filters","text":"A filter in knockout punches is a way of 'piping' a text binding through a pre-defined filter to format the value in a desired way. The filter is initiated using the | sign followed by the name of the filter and any necessary parameter inputs to the filter.","title":"Filters"},{"location":"bindingsAndFilters/#currency","text":"The currency filter can be combined with a text data-bind to format a number as a currency. The filter takes two optional parameters - currency and divider. The currency is the unit in which you want to present the formatted number, e.g. $ or GBP or SEK. The divider lets you decide what delimiter to use for formatting the number. < div data-bind = \"text: 100000 | currency:'$':','\" ></ div > This filter will format the number 100000 as $100,000. The following code < div data-bind = \"text: 100000 | currency:'SEK'\" ></ div > will result in the formatted value 100 000 SEK.","title":"Currency"},{"location":"buildingApps/","text":"Building apps Basics Apps are small standalone tools, used for customer customisations. They are loaded dynamically and added only through a single line of HTML in the Actionpad. The business logic and dataconnection is allways performed by the VBA. This functionallity should be inside a single module. The general idea of an app is to implement: A function or procedure to deliver data. VBA or SQL, can deliver data as xml, record or records. A view - An html template with the structure of your app. A view-model - the viewmodel holds a rednering and frontend logic An app is initilaized as: 1. The app is loaded and the config of the app is parsed 2. Data is loaded from Lime CRM, from your supplied function 3. The data is converted to a view-model (In this case the view model is just a JSON represenation of the data) 4. Additional resources are loaded to the app 5. The view-model is supplied to the app and cam be modified 6. The app view is loaded from app.html. 7. The view and view-model is rendered and injected to the actionpad Initiation of an app is executed by the lbs.apploader.js module and triggered by an data-app: -attribute. The data can be provided as XML, record or records and limebootstrap will then supply the app with an View-model based on the data, free for you to work with. In the view model you will also find all translations and avilable data from the current actionpad viewmodel. < div data-app = \"{app:'checklist',config:{canBeUnchecked:true,allowRemove:true, canAddTask:true}} \" ></ div > Please note that you can not have a data-app and data-bind attribute in the same element The javascript app structure lbs . apploader . register ( 'template' , function () { //Insert name of app here var self = this ; //config this . config = { dataSources : [ //Either provide your data source here, or let the user of your app supplie it ], resources : { //Add any extra resources that should be loadad. The paths are realtive your app folder, exept libs which are loaded from system/js/ scripts : [], styles : [ 'app.css' ], libs : [ 'json2xml.js' ] } }, //initialize this . initialize = function ( node , viewModel ) { //Use this method to setup you app. // //The data you requested along with activeInspector are delivered in the variable viewModel. //You may make any modifications you please to it or replace is with a entirely new one before returning it. //The returned viewmodel will be used to build your app. return viewModel ; } Object definitions DataSouce {type: '', source: '', alias:''} LimeVersion Parameter Type Comment comparable int full string major int minor int build int Library attributes Parameter Type Comment lbs.debug int if debug modes has been triggered lbs.limeVersion LimeVersion lbs.limeDataConnection object reference to window.external lbs.hasLimeConnection boolean has reference to lime? lbs.activeClass string lbs.activeDatabase string lbs.activeServer string lbs.common.iconTemplate string template for icon html Library helper functions lbs.heper.loadDataSorces() Loads multiple datasources into a JSON objekt Syntax lbs.heper.loadDataSorces(viewModel, DataSources, [override]) Parameters Parameters Type Comment viewModel array object to assign values to DataSources Array sources Override boolean if duplicate values should be overriden or thrown away lbs.heper.loadDataSorce() Loads a datasources into a JSON objekt Syntax lbs.heper.loadDataSorce(viewModel, DataSource, [override]) Parameters Parameters Type Comment viewModel array object to assign values to DataSource DataSouce source Override boolean if duplicate values should be overriden or thrown away lbs.common.getErrorText() Returnes a funny error adjective :) Syntax lbs.common.getErrorText() Return string lbs.common.escapeHtml() Escape html Syntax lbs.common.escapeHtml(html) Parameters Parameters Type html string ###### Return string lbs.common.createLimeLink() Create limelink Syntax lbs.common.createLimeLink(class,id) Parameters Parameters Type class string id int ###### Return string lbs.common.getURLParameter() Extract URL parameter from GET variable Syntax lbs.common.getURLParameter(name) Parameters Parameters Type name string ###### Return string lbs.common.executeVba() Execute VBA code, same as old VBA.run() Syntax lbs.common.executeVba(proc,params) Parameters Parameters Type proc string params string ###### Return string lbs.common.nl2br replace nl chars with html rowbreaks Syntax lbs.common.nl2br(data) Parameters Parameters Type data string ##### Return string string.format() Implementation of c# String.Format() Syntax string.format(format,var1,[var2]) Parameters Parameters Type format string var replacement varibles ##### Return string lbs.log.debug Log message at debug level Syntax lbs.log.debug(msg) Parameters Parameters Type msg message lbs.log.debug Log message at info level Syntax lbs.log.info(msg) Parameters Parameters Type msg message lbs.log.warn Log message at warn level Syntax lbs.log.warn(msg, [e]) Parameters Parameters Type msg message e Execption (optional) lbs.log.error Log message at error level Syntax lbs.log.error(msg, [e]) Parameters |Parameters|Type| |---|---|---| |msg|message| |e|Execption (optional)|","title":"Building Apps"},{"location":"buildingApps/#building-apps","text":"","title":"Building apps"},{"location":"buildingApps/#basics","text":"Apps are small standalone tools, used for customer customisations. They are loaded dynamically and added only through a single line of HTML in the Actionpad. The business logic and dataconnection is allways performed by the VBA. This functionallity should be inside a single module. The general idea of an app is to implement: A function or procedure to deliver data. VBA or SQL, can deliver data as xml, record or records. A view - An html template with the structure of your app. A view-model - the viewmodel holds a rednering and frontend logic An app is initilaized as: 1. The app is loaded and the config of the app is parsed 2. Data is loaded from Lime CRM, from your supplied function 3. The data is converted to a view-model (In this case the view model is just a JSON represenation of the data) 4. Additional resources are loaded to the app 5. The view-model is supplied to the app and cam be modified 6. The app view is loaded from app.html. 7. The view and view-model is rendered and injected to the actionpad Initiation of an app is executed by the lbs.apploader.js module and triggered by an data-app: -attribute. The data can be provided as XML, record or records and limebootstrap will then supply the app with an View-model based on the data, free for you to work with. In the view model you will also find all translations and avilable data from the current actionpad viewmodel. < div data-app = \"{app:'checklist',config:{canBeUnchecked:true,allowRemove:true, canAddTask:true}} \" ></ div > Please note that you can not have a data-app and data-bind attribute in the same element","title":"Basics"},{"location":"buildingApps/#the-javascript-app-structure","text":"lbs . apploader . register ( 'template' , function () { //Insert name of app here var self = this ; //config this . config = { dataSources : [ //Either provide your data source here, or let the user of your app supplie it ], resources : { //Add any extra resources that should be loadad. The paths are realtive your app folder, exept libs which are loaded from system/js/ scripts : [], styles : [ 'app.css' ], libs : [ 'json2xml.js' ] } }, //initialize this . initialize = function ( node , viewModel ) { //Use this method to setup you app. // //The data you requested along with activeInspector are delivered in the variable viewModel. //You may make any modifications you please to it or replace is with a entirely new one before returning it. //The returned viewmodel will be used to build your app. return viewModel ; }","title":"The javascript app structure"},{"location":"buildingApps/#object-definitions","text":"","title":"Object definitions"},{"location":"buildingApps/#datasouce","text":"{type: '', source: '', alias:''}","title":"DataSouce"},{"location":"buildingApps/#limeversion","text":"Parameter Type Comment comparable int full string major int minor int build int","title":"LimeVersion"},{"location":"buildingApps/#library-attributes","text":"Parameter Type Comment lbs.debug int if debug modes has been triggered lbs.limeVersion LimeVersion lbs.limeDataConnection object reference to window.external lbs.hasLimeConnection boolean has reference to lime? lbs.activeClass string lbs.activeDatabase string lbs.activeServer string lbs.common.iconTemplate string template for icon html","title":"Library attributes"},{"location":"buildingApps/#library-helper-functions","text":"","title":"Library helper functions"},{"location":"buildingApps/#lbsheperloaddatasorces","text":"Loads multiple datasources into a JSON objekt","title":"lbs.heper.loadDataSorces()"},{"location":"buildingApps/#syntax","text":"lbs.heper.loadDataSorces(viewModel, DataSources, [override])","title":"Syntax"},{"location":"buildingApps/#parameters","text":"Parameters Type Comment viewModel array object to assign values to DataSources Array sources Override boolean if duplicate values should be overriden or thrown away","title":"Parameters"},{"location":"buildingApps/#lbsheperloaddatasorce","text":"Loads a datasources into a JSON objekt","title":"lbs.heper.loadDataSorce()"},{"location":"buildingApps/#syntax_1","text":"lbs.heper.loadDataSorce(viewModel, DataSource, [override])","title":"Syntax"},{"location":"buildingApps/#parameters_1","text":"Parameters Type Comment viewModel array object to assign values to DataSource DataSouce source Override boolean if duplicate values should be overriden or thrown away","title":"Parameters"},{"location":"buildingApps/#lbscommongeterrortext","text":"Returnes a funny error adjective :)","title":"lbs.common.getErrorText()"},{"location":"buildingApps/#syntax_2","text":"lbs.common.getErrorText()","title":"Syntax"},{"location":"buildingApps/#return","text":"string","title":"Return"},{"location":"buildingApps/#lbscommonescapehtml","text":"Escape html","title":"lbs.common.escapeHtml()"},{"location":"buildingApps/#syntax_3","text":"lbs.common.escapeHtml(html)","title":"Syntax"},{"location":"buildingApps/#parameters_2","text":"Parameters Type html string ###### Return string","title":"Parameters"},{"location":"buildingApps/#lbscommoncreatelimelink","text":"Create limelink","title":"lbs.common.createLimeLink()"},{"location":"buildingApps/#syntax_4","text":"lbs.common.createLimeLink(class,id)","title":"Syntax"},{"location":"buildingApps/#parameters_3","text":"Parameters Type class string id int ###### Return string","title":"Parameters"},{"location":"buildingApps/#lbscommongeturlparameter","text":"Extract URL parameter from GET variable","title":"lbs.common.getURLParameter()"},{"location":"buildingApps/#syntax_5","text":"lbs.common.getURLParameter(name)","title":"Syntax"},{"location":"buildingApps/#parameters_4","text":"Parameters Type name string ###### Return string","title":"Parameters"},{"location":"buildingApps/#lbscommonexecutevba","text":"Execute VBA code, same as old VBA.run()","title":"lbs.common.executeVba()"},{"location":"buildingApps/#syntax_6","text":"lbs.common.executeVba(proc,params)","title":"Syntax"},{"location":"buildingApps/#parameters_5","text":"Parameters Type proc string params string ###### Return string","title":"Parameters"},{"location":"buildingApps/#lbscommonnl2br","text":"replace nl chars with html rowbreaks","title":"lbs.common.nl2br"},{"location":"buildingApps/#syntax_7","text":"lbs.common.nl2br(data)","title":"Syntax"},{"location":"buildingApps/#parameters_6","text":"Parameters Type data string ##### Return string","title":"Parameters"},{"location":"buildingApps/#stringformat","text":"Implementation of c# String.Format()","title":"string.format()"},{"location":"buildingApps/#syntax_8","text":"string.format(format,var1,[var2])","title":"Syntax"},{"location":"buildingApps/#parameters_7","text":"Parameters Type format string var replacement varibles ##### Return string","title":"Parameters"},{"location":"buildingApps/#lbslogdebug","text":"Log message at debug level","title":"lbs.log.debug"},{"location":"buildingApps/#syntax_9","text":"lbs.log.debug(msg)","title":"Syntax"},{"location":"buildingApps/#parameters_8","text":"Parameters Type msg message","title":"Parameters"},{"location":"buildingApps/#lbslogdebug_1","text":"Log message at info level","title":"lbs.log.debug"},{"location":"buildingApps/#syntax_10","text":"lbs.log.info(msg)","title":"Syntax"},{"location":"buildingApps/#parameters_9","text":"Parameters Type msg message","title":"Parameters"},{"location":"buildingApps/#lbslogwarn","text":"Log message at warn level","title":"lbs.log.warn"},{"location":"buildingApps/#syntax_11","text":"lbs.log.warn(msg, [e])","title":"Syntax"},{"location":"buildingApps/#parameters_10","text":"Parameters Type msg message e Execption (optional)","title":"Parameters"},{"location":"buildingApps/#lbslogerror","text":"Log message at error level","title":"lbs.log.error"},{"location":"buildingApps/#syntax_12","text":"lbs.log.error(msg, [e])","title":"Syntax"},{"location":"buildingApps/#parameters_11","text":"|Parameters|Type| |---|---|---| |msg|message| |e|Execption (optional)|","title":"Parameters"},{"location":"changelog/","text":"Changelog 1.12 This is the last release of LBS. Further updates will be included in Lime CRM Desktop. To make sure a solution will work with Lime CRM Desktop 11.0 or greater, Please make sure LBS 1.12 is installed. Download LBS 1.12 1.9 Cookies Currency filter Selectable watch Improved searchability Option keys in VM No more snow Log to infolog Improved language support Font awesome 4.4 Info about load time for apps and LBS 1.8 Search for data in the watch Improved log functionality Minified CSS and JavaScript Knockout 3.3 Fontawesome 4.3 Moment 2.10.3 Twitter Bootstrap 3.3.5 1.7 New data carousel New colors Improved data-bind popover Updated Font Awsome to 4.2 Updated Bootstrap to 3.2.1 Added utility file Jotnar.js 1.6 This is coming 1.5 Shortkeys for opening and closing watches and logs A lot of new bindings Knockout 3.1 Knockout punches Fontawesome 4.1 1.4 Better watch management Linting and errorhandling Bug fixes 1.3 Updated log functionality New config solution Joshua - helper to get started with apps 1.2 ViewModel viewer Right-click enabled in debugmode No version check outside if Lime 1.1 Bugfix: Handeling of _config.js now works in IE9 Bugfix: Index-view won't cause an ugly error any more Bugfix: Checking for updates should work better 1.0 NOTE: Not backwards compatible, user action needed on upgrade. The big 1.0 release! untz untz untz NOTE: Format of _config.js has changed and the file must be replaced! If you are upgrading and you have modified the file, look at the new format and apply your changed accordingly. Should be a 10 second fix. Apps now auto-magically check their versions compared to the latest version available on the appstore. If a newer (and always better) version has been released you can directly downloaded and install it with three clicks and one copy-paste. New dataSources are available. Most exciting is 'AsyncPost' which combined with a proxy server for Lime WebService can fetch data without Lime freezing. Great job FredrikL! 0.9 Now in Twitter Bootstrap 3.1. Handling of inline and tab views have been improved 0.8 Bugs have been eaten! 0.7 NOTE: Not backwards compatible, user action need on upgrade. Added version checking. If debug is turned on the version of the installed framework is compared with the current version on GitHub. The user is notified and can download a new version. Added a method to the VBA method \"lbsHelper\". If upgrading, replace old version with new. 0.6 Added support for insepctorId param in 10.11 Added global config, removed inline config Inline config entries in \"comment-style\" should be moved to _config.js 0.5 Bugfix: The styling of the menu hover-effekt is imporoved Bugfix: Header icon is now properly aligned 0.4 Skins are now supported! Actionpads must be reloaded to apply the skin change. 0.3 Updated to font awesome 4.0. All icon bindings must be changed to handel the new \"fa-\" naming convention Updated to Twitter Bootstrap 3.0 .nav-header should be change to .menu-header .menu property \"hidden\" should be changed to \"collapsed\" 0.2 Replace header tag <div class=\"header-fa-container helpdesk\"> with <div class=\"header-icon\"></div> . The image to show will sort itself out. Place any images you may need in the root folder \"resources\" or a subdirectory of it Invoke old-school apps with the binding \"appInvoke\" Remove div with id #header-info and add class .info-links to the list of info links in the header Remove div with id #content-container","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#112","text":"This is the last release of LBS. Further updates will be included in Lime CRM Desktop. To make sure a solution will work with Lime CRM Desktop 11.0 or greater, Please make sure LBS 1.12 is installed. Download LBS 1.12","title":"1.12"},{"location":"changelog/#19","text":"Cookies Currency filter Selectable watch Improved searchability Option keys in VM No more snow Log to infolog Improved language support Font awesome 4.4 Info about load time for apps and LBS","title":"1.9"},{"location":"changelog/#18","text":"Search for data in the watch Improved log functionality Minified CSS and JavaScript Knockout 3.3 Fontawesome 4.3 Moment 2.10.3 Twitter Bootstrap 3.3.5","title":"1.8"},{"location":"changelog/#17","text":"New data carousel New colors Improved data-bind popover Updated Font Awsome to 4.2 Updated Bootstrap to 3.2.1 Added utility file Jotnar.js","title":"1.7"},{"location":"changelog/#16","text":"This is coming","title":"1.6"},{"location":"changelog/#15","text":"Shortkeys for opening and closing watches and logs A lot of new bindings Knockout 3.1 Knockout punches Fontawesome 4.1","title":"1.5"},{"location":"changelog/#14","text":"Better watch management Linting and errorhandling Bug fixes","title":"1.4"},{"location":"changelog/#13","text":"Updated log functionality New config solution Joshua - helper to get started with apps","title":"1.3"},{"location":"changelog/#12","text":"ViewModel viewer Right-click enabled in debugmode No version check outside if Lime","title":"1.2"},{"location":"changelog/#11","text":"Bugfix: Handeling of _config.js now works in IE9 Bugfix: Index-view won't cause an ugly error any more Bugfix: Checking for updates should work better","title":"1.1"},{"location":"changelog/#10","text":"NOTE: Not backwards compatible, user action needed on upgrade. The big 1.0 release! untz untz untz NOTE: Format of _config.js has changed and the file must be replaced! If you are upgrading and you have modified the file, look at the new format and apply your changed accordingly. Should be a 10 second fix. Apps now auto-magically check their versions compared to the latest version available on the appstore. If a newer (and always better) version has been released you can directly downloaded and install it with three clicks and one copy-paste. New dataSources are available. Most exciting is 'AsyncPost' which combined with a proxy server for Lime WebService can fetch data without Lime freezing. Great job FredrikL!","title":"1.0"},{"location":"changelog/#09","text":"Now in Twitter Bootstrap 3.1. Handling of inline and tab views have been improved","title":"0.9"},{"location":"changelog/#08","text":"Bugs have been eaten!","title":"0.8"},{"location":"changelog/#07","text":"NOTE: Not backwards compatible, user action need on upgrade. Added version checking. If debug is turned on the version of the installed framework is compared with the current version on GitHub. The user is notified and can download a new version. Added a method to the VBA method \"lbsHelper\". If upgrading, replace old version with new.","title":"0.7"},{"location":"changelog/#06","text":"Added support for insepctorId param in 10.11 Added global config, removed inline config Inline config entries in \"comment-style\" should be moved to _config.js","title":"0.6"},{"location":"changelog/#05","text":"Bugfix: The styling of the menu hover-effekt is imporoved Bugfix: Header icon is now properly aligned","title":"0.5"},{"location":"changelog/#04","text":"Skins are now supported! Actionpads must be reloaded to apply the skin change.","title":"0.4"},{"location":"changelog/#03","text":"Updated to font awesome 4.0. All icon bindings must be changed to handel the new \"fa-\" naming convention Updated to Twitter Bootstrap 3.0 .nav-header should be change to .menu-header .menu property \"hidden\" should be changed to \"collapsed\"","title":"0.3"},{"location":"changelog/#02","text":"Replace header tag <div class=\"header-fa-container helpdesk\"> with <div class=\"header-icon\"></div> . The image to show will sort itself out. Place any images you may need in the root folder \"resources\" or a subdirectory of it Invoke old-school apps with the binding \"appInvoke\" Remove div with id #header-info and add class .info-links to the list of info links in the header Remove div with id #content-container","title":"0.2"},{"location":"components/","text":"The header section The header section is the colorful header of each actionpad. The following colors are provided: Usage: < div class = \"header-container [insert color here]\" > The menu A menu can be created by the following HTML: < ul class = \"expandable collapsed\" > < li class = \"menu-header\" > Text </ li > ... </ ul > A menu has two properties, Expandable and collapsed . The are added in the <ul> class: <ul class=\"menu expandable collapsed\"> Expandable: The menu can be collapsed by clicking the header Collapsed: The menu is collapsed when the actionpad is loaded. Stupid to use without using Expandable... Dropdown button: A dropdown button can contain many options, while taking up very little space. < div class = \"btn-group btn-group-lime\" data-bind = \"visible:todo.done.value != 1\" > < button class = \"btn btn-lime btn-default dropdown-toggle\" data-toggle = \"dropdown\" data-bind = \" text:localize.Actionpad_Todo.headermoveforward, icon: 'fa-caret-down'\" > </ button > < ul class = \"dropdown-menu\" > < li data-bind = \"vba:'ActionPad_todo.Postpone, d, 1', text:localize.Actionpad_Todo.mf1d\" ></ li > < li class = \"divider\" ></ li > < li data-bind = \"vba:'ActionPad_todo.Postpone, ww, 1', text:localize.Actionpad_Todo.mf1w\" ></ li > < li data-bind = \"vba:'ActionPad_todo.Postpone, ww, 2', text:localize.Actionpad_Todo.mf2w\" ></ li > < li class = \"divider\" ></ li > < li data-bind = \"vba:'ActionPad_todo.Postpone, m, 1', text:localize.Actionpad_Todo.mf1m\" ></ li > < li data-bind = \"vba:'ActionPad_todo.Postpone, m, 6', text:localize.Actionpad_Todo.mf6m\" ></ li > < li class = \"divider\" ></ li > < li data-bind = \"vba:'ActionPad_todo.Postpone, yyyy, 1', text:localize.Actionpad_Todo.mf1y\" ></ li > </ ul > </ div > Data carousel Creates a data carousel that can be used when your actionpad is full of stuff. The carousel will build a pages for every first level child regardless of type. OBS! You always need to set height. Examples < div data-carousel = \"{height:'25%'}\" > < div data-app = \"{app:'Fulltextsearch',config:{}}\" ></ div > < div > This is your second div </ div > < ul > < li > LBS rules </ li > </ ul > </ div >","title":"Components"},{"location":"components/#the-header-section","text":"The header section is the colorful header of each actionpad. The following colors are provided: Usage: < div class = \"header-container [insert color here]\" >","title":"The header section"},{"location":"components/#the-menu","text":"A menu can be created by the following HTML: < ul class = \"expandable collapsed\" > < li class = \"menu-header\" > Text </ li > ... </ ul > A menu has two properties, Expandable and collapsed . The are added in the <ul> class: <ul class=\"menu expandable collapsed\"> Expandable: The menu can be collapsed by clicking the header Collapsed: The menu is collapsed when the actionpad is loaded. Stupid to use without using Expandable...","title":"The menu"},{"location":"components/#dropdown-button","text":"A dropdown button can contain many options, while taking up very little space. < div class = \"btn-group btn-group-lime\" data-bind = \"visible:todo.done.value != 1\" > < button class = \"btn btn-lime btn-default dropdown-toggle\" data-toggle = \"dropdown\" data-bind = \" text:localize.Actionpad_Todo.headermoveforward, icon: 'fa-caret-down'\" > </ button > < ul class = \"dropdown-menu\" > < li data-bind = \"vba:'ActionPad_todo.Postpone, d, 1', text:localize.Actionpad_Todo.mf1d\" ></ li > < li class = \"divider\" ></ li > < li data-bind = \"vba:'ActionPad_todo.Postpone, ww, 1', text:localize.Actionpad_Todo.mf1w\" ></ li > < li data-bind = \"vba:'ActionPad_todo.Postpone, ww, 2', text:localize.Actionpad_Todo.mf2w\" ></ li > < li class = \"divider\" ></ li > < li data-bind = \"vba:'ActionPad_todo.Postpone, m, 1', text:localize.Actionpad_Todo.mf1m\" ></ li > < li data-bind = \"vba:'ActionPad_todo.Postpone, m, 6', text:localize.Actionpad_Todo.mf6m\" ></ li > < li class = \"divider\" ></ li > < li data-bind = \"vba:'ActionPad_todo.Postpone, yyyy, 1', text:localize.Actionpad_Todo.mf1y\" ></ li > </ ul > </ div >","title":"Dropdown button:"},{"location":"components/#data-carousel","text":"Creates a data carousel that can be used when your actionpad is full of stuff. The carousel will build a pages for every first level child regardless of type. OBS! You always need to set height. Examples < div data-carousel = \"{height:'25%'}\" > < div data-app = \"{app:'Fulltextsearch',config:{}}\" ></ div > < div > This is your second div </ div > < ul > < li > LBS rules </ li > </ ul > </ div >","title":"Data carousel"},{"location":"datasources/","text":"Data sources A core concept in Lime Bootstrap is data sources. A data source is just what it sounds like, a source of data. The source can be many things, like a Lime Inspector, a REST web-service, a stored procedure or a VBA function. Data sources are used both while working with basic views and especially when working with apps. The datasource configuration takes a paramter type and then other source specific params. A data source can also take a parameter \"alias\" , which lets you specify a name for the data source in viewModel. This might be usefull if you have multiple sources on the same table wich may couse collisions. Example: dataSources : [ { type : 'activeInspector' }, { type : 'localization' }, { type : 'relatedRecord' , source : 'person' , view : 'name;phone' , alias : 'contact' }, { type : 'storedProcedure' , source : '' } ], autorefresh : false Note that autorefresh isn't implemented yet! The available data sources are: activeInspector Fetch data from the ActiveInspector The datasource takes no additional params. record Execute specified VBA-function which must return a Record object. Param Description Default source Name of VBA-function PassInspectorParam Pass activeInspector id for lookups false records Execute specified VBA-function which must return a Records set object. Param Description Default source Name of VBA-function PassInspectorParam Pass activeInspector id for lookups false relatedRecord Loads additonal fields from a record connected to the active inspector. Param Description source relationfield on activeinspector view semicolon separeted list of fields to fetch xml Execute specified VBA-function which must return a XML as string Param Description Default source Name of VBA-function PassInspectorParam Pass activeInspector id for lookups false localization Execute specified VBA-function which must return a Records set object. The datasource takes no additional params. storedProcedure Execute specified stored procedure. The procedure must return xml. Param Description source Name of stored procedure HTTPGetXml Calls a web-service and expects a xml response. Param Description source URL SOAPGetXml Calls a SOAP web-service. Param Description source URL action SOAP action xml SOAP request","title":"Data sources"},{"location":"datasources/#data-sources","text":"A core concept in Lime Bootstrap is data sources. A data source is just what it sounds like, a source of data. The source can be many things, like a Lime Inspector, a REST web-service, a stored procedure or a VBA function. Data sources are used both while working with basic views and especially when working with apps. The datasource configuration takes a paramter type and then other source specific params. A data source can also take a parameter \"alias\" , which lets you specify a name for the data source in viewModel. This might be usefull if you have multiple sources on the same table wich may couse collisions.","title":"Data sources"},{"location":"datasources/#example","text":"dataSources : [ { type : 'activeInspector' }, { type : 'localization' }, { type : 'relatedRecord' , source : 'person' , view : 'name;phone' , alias : 'contact' }, { type : 'storedProcedure' , source : '' } ], autorefresh : false Note that autorefresh isn't implemented yet! The available data sources are:","title":"Example:"},{"location":"datasources/#activeinspector","text":"Fetch data from the ActiveInspector The datasource takes no additional params.","title":"activeInspector"},{"location":"datasources/#record","text":"Execute specified VBA-function which must return a Record object. Param Description Default source Name of VBA-function PassInspectorParam Pass activeInspector id for lookups false","title":"record"},{"location":"datasources/#records","text":"Execute specified VBA-function which must return a Records set object. Param Description Default source Name of VBA-function PassInspectorParam Pass activeInspector id for lookups false","title":"records"},{"location":"datasources/#relatedrecord","text":"Loads additonal fields from a record connected to the active inspector. Param Description source relationfield on activeinspector view semicolon separeted list of fields to fetch","title":"relatedRecord"},{"location":"datasources/#xml","text":"Execute specified VBA-function which must return a XML as string Param Description Default source Name of VBA-function PassInspectorParam Pass activeInspector id for lookups false","title":"xml"},{"location":"datasources/#localization","text":"Execute specified VBA-function which must return a Records set object. The datasource takes no additional params.","title":"localization"},{"location":"datasources/#storedprocedure","text":"Execute specified stored procedure. The procedure must return xml. Param Description source Name of stored procedure","title":"storedProcedure"},{"location":"datasources/#httpgetxml","text":"Calls a web-service and expects a xml response. Param Description source URL","title":"HTTPGetXml"},{"location":"datasources/#soapgetxml","text":"Calls a SOAP web-service. Param Description source URL action SOAP action xml SOAP request","title":"SOAPGetXml"},{"location":"philosophy/","text":"Philosophy The framework is \"opininated and convention over configuration\", meaning there should be one and only one way to do things. If you find yourself writing lots of code to do something, or god forbid, needing to modify ANY file in the systems folder, you're propably doing it wrong. Take a deep breath and ask for assistance. If you want to use the framework I solemnly swear to the following conditions: The systems folder or lbs.html should never, ever be modified. I can achieve cool and smart functions without ever touching it. I must unlearn what you have learned! The framework offers a completely different methodology of working with ActionPads, I will embrace it. I won't ever copy and paste code from old Actionpads. A rabbit will die if I even think of coping VBScript... I will follow the design guidelines: The design should be flat, free from gradients and focused on content. The actionpad is very narrow (~250px), use the height and not the width of the actionpad. Font should be dark blue on the default blue background. In any other case, white should be used. It white cannot be used, use a darker variant of the background color i.e dark green on green background Font awesome is used for all icons except for the header icons, here we use Icon Experience's new M-icon set. Stick to default colors, don't \"brand\" the solution with customers logo and colors. I won't include any scripts and styles in my views. I want to contribute to a better framework, any improvements, errors or bugfixes will be committed to this git repository. Happy coding!","title":"Philosophy"},{"location":"philosophy/#philosophy","text":"The framework is \"opininated and convention over configuration\", meaning there should be one and only one way to do things. If you find yourself writing lots of code to do something, or god forbid, needing to modify ANY file in the systems folder, you're propably doing it wrong. Take a deep breath and ask for assistance. If you want to use the framework I solemnly swear to the following conditions: The systems folder or lbs.html should never, ever be modified. I can achieve cool and smart functions without ever touching it. I must unlearn what you have learned! The framework offers a completely different methodology of working with ActionPads, I will embrace it. I won't ever copy and paste code from old Actionpads. A rabbit will die if I even think of coping VBScript... I will follow the design guidelines: The design should be flat, free from gradients and focused on content. The actionpad is very narrow (~250px), use the height and not the width of the actionpad. Font should be dark blue on the default blue background. In any other case, white should be used. It white cannot be used, use a darker variant of the background color i.e dark green on green background Font awesome is used for all icons except for the header icons, here we use Icon Experience's new M-icon set. Stick to default colors, don't \"brand\" the solution with customers logo and colors. I won't include any scripts and styles in my views. I want to contribute to a better framework, any improvements, errors or bugfixes will be committed to this git repository. Happy coding!","title":"Philosophy"},{"location":"technicalPlatform/","text":"Technical Included javascript frameworks The bundled library contains: jQuery Underscore.js Moment.js Knockout.js Bootstrap.js Icons Font awesome is include. Please see the font awesome documentation. Structure of the framework The framework has the following file structure apps - small selfdependent html apps that can be dynamically loaded into the Actionpads ... System - READ ONLY! This is the base of the framework and should never be modified bin - launch Google Chrome in Allow Cross Origin mode css lime.css - styling for the framework. Overrides several Twitter Bootstrap stylings font-awesome.css bootstrap.css font - Font files for Font awesome ... img - images used in the framework which aren't from Font Awesom ... js - all javacript used in the framework lbs.js - Frameworks main javascript ... Third party frameworks ... view - Views used by the system, for example the debug view application.html The core: lbs.js and it's modules lbs.js is the main file of the framework is mainly in charge of setup and delegating tasks. It uses the following modules to accually do stuff: * lbs.apploader.js - Handels the loading of the apps and their initiation * lbs.bindings.js - The custom knockout bindnings are defined here * lbs.loader.js - Handels loading of scripts, views and styles. * lbs.log.js - Handels logging to the custom console.","title":"Technical Platform"},{"location":"technicalPlatform/#technical","text":"","title":"Technical"},{"location":"technicalPlatform/#included-javascript-frameworks","text":"The bundled library contains: jQuery Underscore.js Moment.js Knockout.js Bootstrap.js","title":"Included javascript frameworks"},{"location":"technicalPlatform/#icons","text":"Font awesome is include. Please see the font awesome documentation.","title":"Icons"},{"location":"technicalPlatform/#structure-of-the-framework","text":"The framework has the following file structure apps - small selfdependent html apps that can be dynamically loaded into the Actionpads ... System - READ ONLY! This is the base of the framework and should never be modified bin - launch Google Chrome in Allow Cross Origin mode css lime.css - styling for the framework. Overrides several Twitter Bootstrap stylings font-awesome.css bootstrap.css font - Font files for Font awesome ... img - images used in the framework which aren't from Font Awesom ... js - all javacript used in the framework lbs.js - Frameworks main javascript ... Third party frameworks ... view - Views used by the system, for example the debug view application.html","title":"Structure of the framework"},{"location":"technicalPlatform/#the-core-lbsjs-and-its-modules","text":"lbs.js is the main file of the framework is mainly in charge of setup and delegating tasks. It uses the following modules to accually do stuff: * lbs.apploader.js - Handels the loading of the apps and their initiation * lbs.bindings.js - The custom knockout bindnings are defined here * lbs.loader.js - Handels loading of scripts, views and styles. * lbs.log.js - Handels logging to the custom console.","title":"The core: lbs.js and it's modules"}]}